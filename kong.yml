---
namespace: kong

kong-common:
  metadata:
    name: Kong
    description: |
      Kong is an open-source API gateway and microservices management layer. It is designed to help developers manage, secure, and scale their APIs and microservices. Kong is built on top of the Nginx web server and provides a plugin architecture that allows developers to extend its functionality.

      Kong provides a range of features, including:
      1. API Gateway: Kong acts as a gateway between clients and microservices, providing a single entry point for all API requests.
      2. Load Balancing: Kong can distribute traffic across multiple instances of a microservice, ensuring high availability and scalability.
      3. Authentication and Authorization: Kong provides a range of authentication and authorization plugins, including OAuth2, JWT, and Basic Authentication.
      4. Rate Limiting: Kong can limit the number of requests that clients can make to a microservice, preventing overloading and ensuring fair usage.
      5. Logging and Monitoring: Kong provides detailed logging and monitoring capabilities, allowing developers to track API usage and performance.

      Kong is a popular open-source project with a large and active community of developers. It is used by many organizations to manage their APIs and microservices, including Airbnb, The New York Times, and Zillow.

    tags: Networking, Cross-platform, Lua scripting, API Gateway, Microservices, Load Balancing, Containerization, Cloud-native, DevOps, Security,Analytics, Monitoring, Scalability, Performance, RESTful APIs, GraphQL, Service Mesh
    website: https://konghq.com/
    publisher: monk.io
    icon: https://konghq.com/wp-content/themes/konghq/assets/img/gradient-logo.svg
    private: true
  connections:
    db:
      runnable: kong/db
      service: kong-db
  variables:
    monk_kong_database:
      env: KONG_DATABASE
      value: postgres
    monk_kong_database_name:
      env: KONG_PG_DATABASE
      value: <- `${kong_database_name}`
    monk_kong_database_host:
      env: KONG_PG_HOST
      value: <- connection-hostname("db") split(".dns.podman") join("")
    monk_kong_database_user:
      env: KONG_PG_USER
      value: <- `${kong_database_user}`
    monk_kong_database_port:
      env: KONG_PG_PORT
      value: <- `${kong_database_port}`
    monk_kong_database_password:
      env: KONG_PG_PASSWORD
      value: <- `${kong_database_password}`

kong:
  defines: runnable
  inherits: kong/kong-common
  depends:
    wait-for:
      runnables:
        - kong/db
      timeout: 30
  containers:
    kong-migrations-up:
      image: kong
      image-tag: latest
      bash: kong migrations bootstrap && kong migrations finish
    kong-app:
      image: kong
      image-tag: latest
      environment:
        - <- `KONG_ADMIN_ACCESS_LOG=/dev/stdout`
        - <- `KONG_PROXY_ACCESS_LOG=/dev/stdout`
        - <- `KONG_ADMIN_ERROR_LOG=/dev/stderr`
        - <- `KONG_PROXY_ERROR_LOG=/dev/stderr`
        - <- `KONG_PROXY_LISTEN=0.0.0.0:${kong_proxy_listen}`
        - <- `KONG_ADMIN_LISTEN=0.0.0.0:${kong_admin_listen}`
        # - <- `KONG_PREFIX=/var/run/kong`
        - <- `KONG_DECLARATIVE_CONFIG="/opt/kong/kong.yaml"`
      ports:
        - <- `0.0.0.0:${kong_proxy_listen}:${kong_proxy_listen}`
        - <- `0.0.0.0:${kong_admin_listen}:${kong_admin_listen}`
    konga:
      image: pantsel/konga
      image-tag: latest
      ports:
        - <- `0.0.0.0:${konga_admin_listen}:1337`
  services:
    kong-app:
      container: kong-app
      port: <- `${kong_proxy_listen}`
      protocol: tcp
    konga:
      container: konga
      port: <- `${konga_admin_listen}`
      protocol: tcp
      host-port: <- `${konga_admin_listen}`

db:
  defines: runnable
  variables:
    image-tag:
      type: string
      value: latest
    db-password:
      env: POSTGRES_PASSWORD
      value: <- `${kong_database_password}`
      type: string
    db-user:
      env: POSTGRES_USER
      value: <- `${kong_database_user}`
      type: string
    db-name:
      env: POSTGRES_DB
      value: <- `${kong_database_name}`
      type: string
    db-port:
      value: <- `${kong_database_port}`
      type: int
    db-trust:
      env: POSTGRES_HOST_AUTH_METHOD
      value: trust
  containers:
    postgres:
      image-tag: <- `${image-tag}`
      paths:
        - <- `${monk-volume-path}/kong/db_data:/var/lib/postgresql/data`
      image: postgres
  services:
    kong-db:
      container: postgres
      port: 5432
      protocol: tcp
  checks:
    readiness:
      code: |
        exec("postgres", "pg_isready") "accepting connections" contains?
      period: 15
      initialDelay: 15
